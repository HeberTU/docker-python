version: '3'
# Like other software, docker-compose also started with version 1.0. At the
# time of writing this file, the current latest version of Compose file is 3.7.

# We have specified the version of Compose file we will be using and Docker will
# provide the features accordingly.
# Compose versions are backward compatible, hence it is recommended to use the
# latest version.
services:
  # The services section defines all the docker images required and need to be
  # built for the application to work. In short, it’s the collection of all
  # different components of the application that are dependent on each other.
  # We have two services namely, web and database.
  web:
    # The name web is the name of our Flask app service. It can be anything.
    # Docker Compose will create containers with this name.
    build: .
    # This clause specifies the Dockerfile location. ‘.’ represents the current
    #  directory where the docker-compose.yml file is located and Dockerfile is
    #  used to build an image and run the container from it. We can also
    # provide the absolute path to Dockerfile instead of the current working
    # directory symbol.
    ports:
      - "5000:5000"
    # The ports clause is used to map the container ports to the host machine’s
    # port. It creates a tunnel from the specified container port to the
    # provided host machine’s port. This is the same as using the -p 5000:5000.
    volumes:
      - "./:/code"
    # This is the same as the -v option used to mount disks in docker run
    # command. Here, we are attaching our repo directory to the container’s
    # /code directory so that we don’t have to rebuild the images for every
    # change in the files.
    # This will also help in auto-reloading the server when running in debug
    # mode.
    links:
      - "database:backenddb"
    # Links literally link one service to another. In the bridge network, we
    # have to specify which container should be accessible to what container
    # using a link to the respective containers.
    #
    # Here, we are linking the database container to the web container, so that
    # our web container can reach the database in the bridge network.
    depends_on:
      - database
    # This is used to inform docker-compose about all the dependencies of a
    # service. Docker-compose will then start dependencies first and the main
    # service after.

  database:
    # The name web is the name of our database service.
    build:
      context: ./db
      # Use this to specify the directory of Dockerfile or alternate Dockerfile
      # relative to docker-compose.yml file
      dockerfile: Dockerfile-db
      # specify the name of alternate Dockerfile if it is not named as
      # Dockerfile.
    environment:
      - "MYSQL_ROOT_PASSWORD=root"
      - "MYSQL_USER=testuser"
      - "MYSQL_PASSWORD=admin123"
      - "MYSQL_DATABASE=backend"
    # Any environment variable that should be present in the container can be
    # created using the environment clause. This does the same work as the -e
    # argument in the docker run command while running a container.
    # -----------------------------------------
    # Mount init.sql file to automatically run
    # and create tables for us.
    # everything in docker-entrypoint-initdb.d folder
    # is executed as soon as container is up nd running.
    volumes:
      - "./db/init.sql:/docker-entrypoint-initdb.d/init.sql"